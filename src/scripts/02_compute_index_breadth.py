import logging
import sys
from datetime import datetime, timedelta
from pathlib import Path

import pandas as pd

from regime_predictor_lib.data_processing.index_breadth_calculator import IndexBreadthCalculator

sys.path.insert(0, str(Path(__file__).resolve().parent.parent / "src"))

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

if __name__ == "__main__":
    PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent
    RAW_DATA_DIR = PROJECT_ROOT / "data" / "raw"
    PROCESSED_DATA_DIR = PROJECT_ROOT / "data" / "processed"
    DB_PATH = PROJECT_ROOT / "data" / "db" / "volume" / "quant.db"

    RAW_DATA_DIR.mkdir(parents=True, exist_ok=True)
    PROCESSED_DATA_DIR.mkdir(parents=True, exist_ok=True)
    DB_PATH.parent.mkdir(parents=True, exist_ok=True)

    input_csv_daily_constituents = RAW_DATA_DIR / "sp500_daily_constituents.csv"
    if not input_csv_daily_constituents.exists():
        logger.info(f"Creating dummy {input_csv_daily_constituents.name} for testing.")
        dummy_const_data = {
            "date": ["2023-01-05", "2023-01-06"],
            "tickers": ["AAPL,MSFT", "AAPL,AAL"],
        }
        pd.DataFrame(dummy_const_data).to_csv(input_csv_daily_constituents, index=False)
        logger.info(
            f"Dummy {input_csv_daily_constituents.name} created. "
            f"Please replace with your actual data."
        )

    input_csv_extended_prices = PROCESSED_DATA_DIR / "sp500_ticker_prices_extended.csv"
    if not input_csv_extended_prices.exists():
        logger.info(
            f"Creating dummy {input_csv_extended_prices.name} "
            f"for testing. Run 01_prepare_sp500_extended_data.py script for real data."
        )
        dummy_prices_list = []
        for ticker_symbol in ["AAPL", "MSFT", "AAL"]:
            for i in range(250):
                date_val = datetime(2022, 1, 1) + timedelta(days=i)
                dummy_prices_list.append(
                    {
                        "ticker": ticker_symbol,
                        "date": date_val,
                        "open": 100 + i * 0.1,
                        "high": 102 + i * 0.1,
                        "low": 98 + i * 0.1,
                        "close": 101 + i * 0.1,
                        "adjusted_close": 101 + i * 0.1,
                        "volume": 1000000,
                    }
                )
        for date_str_val in ["2023-01-05", "2023-01-06"]:
            for ticker_symbol in [
                "AAPL",
                "MSFT",
                "AAL",
            ]:
                dummy_prices_list.append(
                    {
                        "ticker": ticker_symbol,
                        "date": pd.to_datetime(date_str_val),
                        "open": 150,
                        "high": 152,
                        "low": 148,
                        "close": 151,
                        "adjusted_close": 151,
                        "volume": 2000000,
                    }
                )
        pd.DataFrame(dummy_prices_list).to_csv(input_csv_extended_prices, index=False)
        logger.info(
            f"Dummy {input_csv_extended_prices.name} created. "
            f"For actual results, ensure this file is generated by the 01 script."
        )

    calculator = IndexBreadthCalculator(
        raw_data_dir=RAW_DATA_DIR,
        processed_data_dir=PROCESSED_DATA_DIR,
        db_path=DB_PATH,
    )
    try:
        calculator.calculate_and_store_breadth(if_exists_db="replace")
        logger.info("Index breadth calculation and storage process finished.")
    except FileNotFoundError:
        logger.error(
            "Required input file(s) for breadth calculation not found. "
            "Ensure extended price data is generated first. Aborting."
        )
    except Exception as e:
        logger.error(f"An error occurred during breadth calculation: {e}", exc_info=True)
